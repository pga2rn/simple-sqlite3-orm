[build-system]
build-backend = "hatchling.build"

requires = [ "hatch-vcs", "hatchling>=1.20" ]

[project]
name = "simple-sqlite3-orm"
description = "A simple yet powerful SQLite3 ORM, powered by pydantic."
readme = "README.md"
license = "Apache-2.0"
license-files = [ "LICENSE" ]
authors = [ { name = "pga2rn", email = "aaronpigybd@gmail.com" } ]
requires-python = ">=3.8"
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [ "version" ]
dependencies = [ "pydantic>=2.6,<3", "typing-extensions>=4" ]

urls.Source = "https://github.com/pga2rn/simple-sqlite3-orm"
urls.Tracker = "https://github.com/pga2rn/simple-sqlite3-orm/issues"

[dependency-groups]
dev = [
  "coverage>=7.6,<7.9",
  "pytest>=8.3,<8.4",
  "pytest-asyncio>=0.24,<0.27",
  "pytest-mock>=3.14,<3.15",
  "ruff>=0.6,<0.12",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
fallback_version = "0.0.0"

[tool.hatch.build.hooks.vcs]
version-file = "src/simple_sqlite3_orm/_version.py"

[tool.hatch.build.targets.sdist]
exclude = [ "/.github", "/docs", "sonar-project.properties" ]

[tool.hatch.build.targets.wheel]
only-include = [ "src" ]
sources = [ "src" ]

[tool.ruff]
target-version = "py38"
include = [ "pyproject.toml", "src/**/*.py", "tests/**/*.py" ]

format.line-ending = "lf"
format.docstring-code-format = true
lint.select = [
  "A",   # flake8-builtins
  "B",   # flake8-bugbear
  "E4",
  "E7",
  "E9",
  "F",   # pyflakes
  "I",   # isort
  "ICN", # flake8-import-conventions
  "Q",   # flake8-quotes
]
lint.ignore = [
  "E203", # (white space before ':'): this error conflicts with black linting
  "E266", # (too many leading '#'): sometimes we use multiple # for separting sections
  "E701", # (multiple statements on one line)
  # recommended by ruff to avoid conflicts with ruff formatter
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "S101", # (use of assert): mostly we use assert for typing
]
lint.pydocstyle.convention = "google"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "class"
log_auto_indent = true
log_format = "%(asctime)s %(levelname)s %(filename)s %(funcName)s,%(lineno)d %(message)s"
log_cli = true
log_cli_level = "INFO"
pythonpath = [ "src" ]
testpaths = [ "./tests" ]

[tool.coverage.run]
omit = [ "_version.py" ]
branch = false
relative_files = true
source = [ "simple_sqlite3_orm" ]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if cfg.DEBUG_MODE",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = true
skip_empty = true

[tool.pyright]
exclude = [ "**/__pycache__", ".ruff_cache", ".venv", "venv", ".test_scripts" ]
typeCheckingMode = "standard"
pythonVersion = "3.12"
